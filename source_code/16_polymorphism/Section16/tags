_HASHTABLE_POLICY_H	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^#define _HASHTABLE_POLICY_H 1$/;"	macro	line:32
std	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	namespace	line:38
__detail	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^namespace __detail$/;"	namespace	line:48	namespace:std
__distance_fw	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<class _Iterator>     inline typename std::iterator_traits<_Iterator>::difference_type     __distance_fw(_Iterator __first, _Iterator __last, $/;"	function	line:64	namespace:std::__detail	signature:(_Iterator __first, _Iterator __last, std::input_iterator_tag)	returns:template inline typename std :: iterator_traits <_Iterator> :: difference_type 
__distance_fw	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<class _Iterator>     inline typename std::iterator_traits<_Iterator>::difference_type     __distance_fw(_Iterator __first, _Iterator __last, $/;"	function	line:70	namespace:std::__detail	signature:(_Iterator __first, _Iterator __last, std::forward_iterator_tag)	returns:template inline typename std :: iterator_traits <_Iterator> :: difference_type 
__distance_fw	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<class _Iterator>     inline typename std::iterator_traits<_Iterator>::difference_type     __distance_fw(_Iterator __first, _Iterator __last) $/;"	function	line:76	namespace:std::__detail	signature:(_Iterator __first, _Iterator __last)	returns:template inline typename std :: iterator_traits <_Iterator> :: difference_type 
_Identity	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Identity$/;"	struct	line:80	namespace:std::__detail
operator ()	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    template<typename _Tp>       _Tp&&       operator()(_Tp&& __x) const $/;"	function	line:84	struct:std::__detail::_Identity	access:public	signature:(_Tp&& __x) const	returns:template _Tp 
_Select1st	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Select1st$/;"	struct	line:88	namespace:std::__detail
get	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      -> decltype(std::get<0>(std::forward<_Tp>(__x)))$/;"	function	line:93	struct:std::__detail::_Select1st	access:public	signature:(std::forward<_Tp>(	returns:decltype 
_ReuseOrAllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     struct _ReuseOrAllocNode $/;"	struct	line:103	namespace:std::__detail
__node_alloc_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_alloc_type = _NodeAlloc;$/;"	member	line:106	struct:std::__detail::_ReuseOrAllocNode	typeref:class:__node_alloc_type	access:private
__hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;$/;"	member	line:107	struct:std::__detail::_ReuseOrAllocNode	typeref:class:__hashtable_alloc	access:private
__node_alloc_traits	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_alloc_traits =$/;"	member	line:108	struct:std::__detail::_ReuseOrAllocNode	typeref:class:__node_alloc_traits	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename __hashtable_alloc::__node_type;$/;"	member	line:110	struct:std::__detail::_ReuseOrAllocNode	typeref:class:__node_type	access:private
_ReuseOrAllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)$/;"	function	line:113	struct:std::__detail::_ReuseOrAllocNode	access:public	signature:(__node_type* __nodes, __hashtable_alloc& __h)
_ReuseOrAllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;$/;"	prototype	line:115	struct:std::__detail::_ReuseOrAllocNode	access:public	signature:(const _ReuseOrAllocNode&)
~_ReuseOrAllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      ~_ReuseOrAllocNode()$/;"	function	line:117	struct:std::__detail::_ReuseOrAllocNode	access:public	signature:()
operator ()	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Arg> 	__node_type* 	operator()(_Arg&& __arg) const $/;"	function	line:122	struct:std::__detail::_ReuseOrAllocNode	access:public	signature:(_Arg&& __arg) const	returns:template __node_type 
_M_nodes	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      mutable __node_type* _M_nodes;$/;"	member	line:148	struct:std::__detail::_ReuseOrAllocNode	access:private
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      __hashtable_alloc& _M_h;$/;"	member	line:149	struct:std::__detail::_ReuseOrAllocNode	access:private
_AllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     struct _AllocNode $/;"	struct	line:155	namespace:std::__detail
__hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;$/;"	member	line:158	struct:std::__detail::_AllocNode	typeref:class:__hashtable_alloc	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename __hashtable_alloc::__node_type;$/;"	member	line:159	struct:std::__detail::_AllocNode	typeref:class:__node_type	access:private
_AllocNode	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _AllocNode(__hashtable_alloc& __h)$/;"	function	line:162	struct:std::__detail::_AllocNode	access:public	signature:(__hashtable_alloc& __h)
operator ()	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Arg> 	__node_type* 	operator()(_Arg&& __arg) const $/;"	function	line:167	struct:std::__detail::_AllocNode	access:public	signature:(_Arg&& __arg) const	returns:template __node_type 
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      __hashtable_alloc& _M_h;$/;"	member	line:171	struct:std::__detail::_AllocNode	access:private
_Hashtable_traits	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>     struct _Hashtable_traits $/;"	struct	line:200	namespace:std::__detail
__hash_cached	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_cached = __bool_constant<_Cache_hash_code>;$/;"	member	line:202	struct:std::__detail::_Hashtable_traits	typeref:class:__hash_cached	access:public
__constant_iterators	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __constant_iterators = __bool_constant<_Constant_iterators>;$/;"	member	line:203	struct:std::__detail::_Hashtable_traits	typeref:class:__constant_iterators	access:public
__unique_keys	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __unique_keys = __bool_constant<_Unique_keys>;$/;"	member	line:204	struct:std::__detail::_Hashtable_traits	typeref:class:__unique_keys	access:public
_Hash_node_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Hash_node_base$/;"	struct	line:215	namespace:std::__detail
_M_nxt	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Hash_node_base* _M_nxt;$/;"	member	line:217	struct:std::__detail::_Hash_node_base	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Hash_node_base() noexcept : _M_nxt() { }$/;"	member	line:219	struct:std::__detail::_Hash_node_base	access:public
_Hash_node_value_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value>     struct _Hash_node_value_base : _Hash_node_base $/;"	struct	line:230	struct:std::__detail::_Hash_node_base	inherits:_Hash_node_base	access:public
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Value value_type; $/;"	typedef	line:232	struct:std::__detail::_Hash_node_base::_Hash_node_value_base	access:public
_M_storage	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      __gnu_cxx::__aligned_buffer<_Value> _M_storage;$/;"	member	line:234	struct:std::__detail::_Hash_node_base::_Hash_node_value_base	access:public
_Hash_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value>     struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value> $/;"	struct	line:265	struct:std::__detail::_Hash_node_base	inherits:_Hash_node_value_base<_Value>	access:public
_M_hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      std::size_t  _M_hash_code;$/;"	member	line:267	struct:std::__detail::_Hash_node_base::_Hash_node	access:public
_Hash_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value>     struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value> $/;"	struct	line:280	struct:std::__detail::_Hash_node_base	inherits:_Hash_node_value_base<_Value>	access:public
_Node_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value, bool _Cache_hash_code>     struct _Node_iterator_base $/;"	struct	line:289	struct:std::__detail::_Hash_node_base	access:public
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = _Hash_node<_Value, _Cache_hash_code>;$/;"	member	line:291	struct:std::__detail::_Hash_node_base::_Node_iterator_base	typeref:class:__node_type	access:public
_M_cur	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      __node_type*  _M_cur;$/;"	member	line:293	struct:std::__detail::_Hash_node_base::_Node_iterator_base	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Node_iterator_base(__node_type* __p) noexcept$/;"	member	line:295	struct:std::__detail::_Hash_node_base::_Node_iterator_base	access:public
_Node_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value, bool __constant_iterators, bool __cache>     struct _Node_iterator $/;"	struct	line:319	namespace:std::__detail	inherits:_Node_iterator_base<_Value,__cache>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Node_iterator_base<_Value, __cache>;$/;"	member	line:323	struct:std::__detail::_Node_iterator	typeref:class:__base_type	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename __base_type::__node_type;$/;"	member	line:324	struct:std::__detail::_Node_iterator	typeref:class:__node_type	access:private
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Value					value_type; $/;"	typedef	line:327	struct:std::__detail::_Node_iterator	access:public
difference_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::ptrdiff_t				difference_type; $/;"	typedef	line:328	struct:std::__detail::_Node_iterator	access:public
iterator_category	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::forward_iterator_tag			iterator_category; $/;"	typedef	line:329	struct:std::__detail::_Node_iterator	access:public
pointer	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using pointer = typename std::conditional<__constant_iterators,$/;"	member	line:331	struct:std::__detail::_Node_iterator	typeref:class:pointer	access:public
reference	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using reference = typename std::conditional<__constant_iterators,$/;"	member	line:334	struct:std::__detail::_Node_iterator	typeref:class:reference	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Node_iterator() noexcept$/;"	member	line:337	struct:std::__detail::_Node_iterator	access:public
_Node_const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Value, bool __constant_iterators, bool __cache>     struct _Node_const_iterator $/;"	struct	line:370	namespace:std	inherits:_Node_iterator_base<_Value,__cache>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Node_iterator_base<_Value, __cache>;$/;"	member	line:374	struct:std::_Node_const_iterator	typeref:class:__base_type	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename __base_type::__node_type;$/;"	member	line:375	struct:std::_Node_const_iterator	typeref:class:__node_type	access:private
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Value					value_type; $/;"	typedef	line:378	struct:std::_Node_const_iterator	access:public
difference_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::ptrdiff_t				difference_type; $/;"	typedef	line:379	struct:std::_Node_const_iterator	access:public
iterator_category	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::forward_iterator_tag			iterator_category; $/;"	typedef	line:380	struct:std::_Node_const_iterator	access:public
pointer	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef const _Value*				pointer; $/;"	typedef	line:382	struct:std::_Node_const_iterator	access:public
reference	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef const _Value&				reference; $/;"	typedef	line:383	struct:std::_Node_const_iterator	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Node_const_iterator() noexcept$/;"	member	line:385	struct:std::_Node_const_iterator	access:public
__constant_iterators	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,$/;"	member	line:392	struct:std::_Node_const_iterator	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^			   __cache>& __x) noexcept$/;"	member	line:393	struct:std::_Node_const_iterator	access:public
_Mod_range_hashing	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Mod_range_hashing$/;"	struct	line:425
first_argument_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t first_argument_type; $/;"	typedef	line:427	struct:_Mod_range_hashing	access:public
second_argument_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t second_argument_type; $/;"	typedef	line:428	struct:_Mod_range_hashing	access:public
result_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t result_type; $/;"	typedef	line:429	struct:_Mod_range_hashing	access:public
_Default_ranged_hash	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Default_ranged_hash { };$/;"	struct	line:442
_Prime_rehash_policy	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Prime_rehash_policy$/;"	struct	line:446
__has_load_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __has_load_factor = std::true_type;$/;"	member	line:448	struct:_Prime_rehash_policy	typeref:class:__has_load_factor	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Prime_rehash_policy(float __z = 1.0) noexcept$/;"	member	line:450	struct:_Prime_rehash_policy	access:public
_M_next_bkt	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_next_bkt(std::size_t __n) const;$/;"	prototype	line:459	struct:_Prime_rehash_policy	access:public	signature:(std::size_t __n) const	returns:std :: size_t 
_M_bkt_for_elements	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_bkt_for_elements(std::size_t __n) const$/;"	function	line:463	struct:_Prime_rehash_policy	access:public	signature:(std::size_t __n) const	returns:std :: size_t 
_M_need_rehash	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,$/;"	prototype	line:471	struct:_Prime_rehash_policy	access:public	signature:(std::size_t __n_bkt, std::size_t __n_elt, std::size_t __n_ins) const	returns:std :: pair <bool, std::size_t> 
_State	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t _State; $/;"	typedef	line:474	struct:_Prime_rehash_policy	access:public
_M_state	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_state() const$/;"	function	line:477	struct:_Prime_rehash_policy	access:public	signature:() const	returns:_State 
_M_reset	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_reset(_State __state)$/;"	function	line:485	struct:_Prime_rehash_policy	access:public	signature:(_State __state)	returns:void 
_S_growth_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    static const std::size_t _S_growth_factor = 2;$/;"	member	line:488	struct:_Prime_rehash_policy	access:public
_M_max_load_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    float		_M_max_load_factor;$/;"	member	line:490	struct:_Prime_rehash_policy	access:public
_M_next_resize	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    mutable std::size_t	_M_next_resize;$/;"	member	line:491	struct:_Prime_rehash_policy	access:public
_Mask_range_hashing	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Mask_range_hashing$/;"	struct	line:495
first_argument_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t first_argument_type; $/;"	typedef	line:497	struct:_Mask_range_hashing	access:public
second_argument_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t second_argument_type; $/;"	typedef	line:498	struct:_Mask_range_hashing	access:public
result_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t result_type; $/;"	typedef	line:499	struct:_Mask_range_hashing	access:public
_Power2_rehash_policy	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Power2_rehash_policy$/;"	struct	line:532
__has_load_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __has_load_factor = std::true_type;$/;"	member	line:534	struct:_Power2_rehash_policy	typeref:class:__has_load_factor	access:public
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Power2_rehash_policy(float __z = 1.0) noexcept$/;"	member	line:536	struct:_Power2_rehash_policy	access:public
_State	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t _State; $/;"	typedef	line:600	struct:_Power2_rehash_policy	access:public
_S_growth_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    static const std::size_t _S_growth_factor = 2;$/;"	member	line:614	struct:_Power2_rehash_policy	access:public
_M_max_load_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    float	_M_max_load_factor;$/;"	member	line:616	struct:_Power2_rehash_policy	access:public
_M_next_resize	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    std::size_t	_M_next_resize;$/;"	member	line:617	struct:_Power2_rehash_policy	access:public
_Map_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits, 	   bool _Unique_keys = _Traits::__unique_keys::value>     struct _Map_base { }; $/;"	struct	line:643
_Map_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, $/;"	struct	line:649
mapped_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using mapped_type = typename std::tuple_element<1, _Pair>::type;$/;"	member	line:652	struct:_Map_base	typeref:class:mapped_type	access:public
_Map_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, $/;"	struct	line:659
__hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable_base = __detail::_Hashtable_base<_Key, _Pair,$/;"	member	line:663	struct:_Map_base	typeref:class:__hashtable_base	access:private
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = _Hashtable<_Key, _Pair, _Alloc,$/;"	member	line:668	struct:_Map_base	typeref:class:__hashtable	access:private
__hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_code = typename __hashtable_base::__hash_code;$/;"	member	line:672	struct:_Map_base	typeref:class:__hash_code	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename __hashtable_base::__node_type;$/;"	member	line:673	struct:_Map_base	typeref:class:__node_type	access:private
key_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using key_type = typename __hashtable_base::key_type;$/;"	member	line:676	struct:_Map_base	typeref:class:key_type	access:public
iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using iterator = typename __hashtable_base::iterator;$/;"	member	line:677	struct:_Map_base	typeref:class:iterator	access:public
mapped_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using mapped_type = typename std::tuple_element<1, _Pair>::type;$/;"	member	line:678	struct:_Map_base	typeref:class:mapped_type	access:public
operator []	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator[](const key_type& __k);$/;"	prototype	line:681	struct:_Map_base	access:public	signature:(const key_type& __k)	returns:mapped_type 
operator []	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator[](key_type&& __k);$/;"	prototype	line:684	struct:_Map_base	access:public	signature:(key_type&& __k)	returns:mapped_type 
at	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      at(const key_type& __k);$/;"	prototype	line:689	struct:_Map_base	access:public	signature:(const key_type& __k)	returns:mapped_type 
at	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      at(const key_type& __k) const;$/;"	prototype	line:692	struct:_Map_base	access:public	signature:(const key_type& __k) const	returns:const mapped_type 
_Insert_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Insert_base $/;"	struct	line:792
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,$/;"	member	line:795	struct:_Insert_base	typeref:class:__hashtable	access:protected
__hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey,$/;"	member	line:799	struct:_Insert_base	typeref:class:__hashtable_base	access:protected
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using value_type = typename __hashtable_base::value_type;$/;"	member	line:803	struct:_Insert_base	typeref:class:value_type	access:protected
iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using iterator = typename __hashtable_base::iterator;$/;"	member	line:804	struct:_Insert_base	typeref:class:iterator	access:protected
const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using const_iterator =  typename __hashtable_base::const_iterator;$/;"	member	line:805	struct:_Insert_base	typeref:class:const_iterator	access:protected
size_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using size_type = typename __hashtable_base::size_type;$/;"	member	line:806	struct:_Insert_base	typeref:class:size_type	access:protected
__unique_keys	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __unique_keys = typename __hashtable_base::__unique_keys;$/;"	member	line:808	struct:_Insert_base	typeref:class:__unique_keys	access:protected
__ireturn_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ireturn_type = typename __hashtable_base::__ireturn_type;$/;"	member	line:809	struct:_Insert_base	typeref:class:__ireturn_type	access:protected
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = _Hash_node<_Value, _Traits::__hash_cached::value>;$/;"	member	line:810	struct:_Insert_base	typeref:class:__node_type	access:protected
__node_alloc_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_alloc_type = __alloc_rebind<_Alloc, __node_type>;$/;"	member	line:811	struct:_Insert_base	typeref:class:__node_alloc_type	access:protected
__node_gen_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_gen_type = _AllocNode<__node_alloc_type>;$/;"	member	line:812	struct:_Insert_base	typeref:class:__node_gen_type	access:protected
_M_conjure_hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_conjure_hashtable()$/;"	function	line:815	struct:_Insert_base	access:protected	signature:()	returns:__hashtable 
_M_insert_range	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _InputIterator, typename _NodeGetter> 	void 	_M_insert_range(_InputIterator __first, _InputIterator __last, $/;"	prototype	line:820	struct:_Insert_base	access:protected	signature:(_InputIterator __first, _InputIterator __last, const _NodeGetter&, true_type)	returns:template void 
_M_insert_range	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _InputIterator, typename _NodeGetter> 	void 	_M_insert_range(_InputIterator __first, _InputIterator __last, $/;"	prototype	line:825	struct:_Insert_base	access:protected	signature:(_InputIterator __first, _InputIterator __last, const _NodeGetter&, false_type)	returns:template void 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      insert(const value_type& __v)$/;"	function	line:830	struct:_Insert_base	access:public	signature:(const value_type& __v)	returns:__ireturn_type 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      insert(const_iterator __hint, const value_type& __v)$/;"	function	line:838	struct:_Insert_base	access:public	signature:(const_iterator __hint, const value_type& __v)	returns:iterator 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      insert(initializer_list<value_type> __l)$/;"	function	line:846	struct:_Insert_base	access:public	signature:(initializer_list<value_type> __l)	returns:void 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _InputIterator> 	void 	insert(_InputIterator __first, _InputIterator __last) $/;"	function	line:851	struct:_Insert_base	access:public	signature:(_InputIterator __first, _InputIterator __last)	returns:template void 
_M_insert_range	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     template<typename _InputIterator, typename _NodeGetter>       void       _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, 		    _RehashPolicy, _Traits>::       _M_insert_range(_InputIterator __first, _InputIterator __last, $/;"	function	line:867	class:_Insert_base	signature:(_InputIterator __first, _InputIterator __last, const _NodeGetter& __node_gen, true_type)	returns:template template void _Insert_base <_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits> :: 
_M_insert_range	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     template<typename _InputIterator, typename _NodeGetter>       void       _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, 		    _RehashPolicy, _Traits>::       _M_insert_range(_InputIterator __first, _InputIterator __last, $/;"	function	line:893	class:_Insert_base	signature:(_InputIterator __first, _InputIterator __last, const _NodeGetter& __node_gen, false_type)	returns:template template void _Insert_base <_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits> :: 
_Insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, $/;"	struct	line:936	inherits:_Insert_base<_Key,_Value,_Alloc,_ExtractKey,_Equal,_H1,_H2,_Hash,_RehashPolicy,_Traits>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,$/;"	member	line:941	struct:_Insert	typeref:class:__base_type	access:public
__hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey,$/;"	member	line:945	struct:_Insert	typeref:class:__hashtable_base	access:public
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using value_type = typename __base_type::value_type;$/;"	member	line:949	struct:_Insert	typeref:class:value_type	access:public
iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using iterator = typename __base_type::iterator;$/;"	member	line:950	struct:_Insert	typeref:class:iterator	access:public
const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using const_iterator =  typename __base_type::const_iterator;$/;"	member	line:951	struct:_Insert	typeref:class:const_iterator	access:public
__unique_keys	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __unique_keys = typename __base_type::__unique_keys;$/;"	member	line:953	struct:_Insert	typeref:class:__unique_keys	access:public
__ireturn_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ireturn_type = typename __hashtable_base::__ireturn_type;$/;"	member	line:954	struct:_Insert	typeref:class:__ireturn_type	access:public
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = typename __base_type::__hashtable;$/;"	member	line:955	struct:_Insert	typeref:class:__hashtable	access:public
__node_gen_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_gen_type = typename __base_type::__node_gen_type;$/;"	member	line:956	struct:_Insert	typeref:class:__node_gen_type	access:public
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type::insert;$/;"	member	line:958	struct:_Insert	typeref:class:__base_type::insert	access:public
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      insert(value_type&& __v)$/;"	function	line:961	struct:_Insert	access:public	signature:(value_type&& __v)	returns:__ireturn_type 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      insert(const_iterator __hint, value_type&& __v)$/;"	function	line:969	struct:_Insert	access:public	signature:(const_iterator __hint, value_type&& __v)	returns:iterator 
_Insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, $/;"	struct	line:983	inherits:_Insert_base<_Key,_Value,_Alloc,_ExtractKey,_Equal,_H1,_H2,_Hash,_RehashPolicy,_Traits>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,$/;"	member	line:988	struct:_Insert	typeref:class:__base_type	access:public
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using value_type = typename __base_type::value_type;$/;"	member	line:991	struct:_Insert	typeref:class:value_type	access:public
iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using iterator = typename __base_type::iterator;$/;"	member	line:992	struct:_Insert	typeref:class:iterator	access:public
const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using const_iterator =  typename __base_type::const_iterator;$/;"	member	line:993	struct:_Insert	typeref:class:const_iterator	access:public
__unique_keys	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __unique_keys = typename __base_type::__unique_keys;$/;"	member	line:995	struct:_Insert	typeref:class:__unique_keys	access:public
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = typename __base_type::__hashtable;$/;"	member	line:996	struct:_Insert	typeref:class:__hashtable	access:public
__ireturn_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ireturn_type = typename __base_type::__ireturn_type;$/;"	member	line:997	struct:_Insert	typeref:class:__ireturn_type	access:public
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type::insert;$/;"	member	line:999	struct:_Insert	typeref:class:__base_type::insert	access:public
__is_cons	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Pair> 	using __is_cons = std::is_constructible<value_type, _Pair&&>; $/;"	member	line:1002	struct:_Insert	typeref:class:__is_cons	access:public
_IFcons	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Pair> 	using _IFcons = std::enable_if<__is_cons<_Pair>::value>; $/;"	member	line:1005	struct:_Insert	typeref:class:_IFcons	access:public
_IFconsp	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Pair> 	using _IFconsp = typename _IFcons<_Pair>::type; $/;"	member	line:1008	struct:_Insert	typeref:class:_IFconsp	access:public
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Pair, typename = _IFconsp<_Pair>> 	__ireturn_type 	insert(_Pair&& __v) $/;"	function	line:1012	struct:_Insert	access:public	signature:(_Pair&& __v)	returns:template __ireturn_type 
insert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Pair, typename = _IFconsp<_Pair>> 	iterator 	insert(const_iterator __hint, _Pair&& __v) $/;"	function	line:1020	struct:_Insert	access:public	signature:(const_iterator __hint, _Pair&& __v)	returns:template iterator 
_Rehash_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, $/;"	struct	line:1050
_Rehash_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, $/;"	struct	line:1061
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,$/;"	member	line:1065	struct:_Rehash_base	typeref:class:__hashtable	access:public
max_load_factor	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      max_load_factor(float __z)$/;"	function	line:1077	struct:_Rehash_base	access:public	signature:(float __z)	returns:void 
reserve	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      reserve(std::size_t __n)$/;"	function	line:1084	struct:_Rehash_base	access:public	signature:(std::size_t __n)	returns:void 
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<int _Nm, typename _Tp>     struct _Hashtable_ebo_helper<_Nm, _Tp, true> $/;"	struct	line:1103	inherits:_Tp
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hashtable_ebo_helper() = default;$/;"	prototype	line:1106	struct:_Hashtable_ebo_helper	access:public	signature:()
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _OtherTp> 	_Hashtable_ebo_helper(_OtherTp&& __tp) $/;"	function	line:1109	struct:_Hashtable_ebo_helper	access:public	signature:(_OtherTp&& __tp)	returns:template 
_S_cget	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _S_cget(const _Hashtable_ebo_helper& __eboh)$/;"	function	line:1114	struct:_Hashtable_ebo_helper	access:public	signature:(const _Hashtable_ebo_helper& __eboh)	returns:const _Tp 
_S_get	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _S_get(_Hashtable_ebo_helper& __eboh)$/;"	function	line:1118	struct:_Hashtable_ebo_helper	access:public	signature:(_Hashtable_ebo_helper& __eboh)	returns:_Tp 
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<int _Nm, typename _Tp>     struct _Hashtable_ebo_helper<_Nm, _Tp, false> $/;"	struct	line:1124
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hashtable_ebo_helper() = default;$/;"	prototype	line:1126	struct:_Hashtable_ebo_helper	access:public	signature:()
_Hashtable_ebo_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _OtherTp> 	_Hashtable_ebo_helper(_OtherTp&& __tp) $/;"	function	line:1129	struct:_Hashtable_ebo_helper	access:public	signature:(_OtherTp&& __tp)	returns:template 
_S_cget	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _S_cget(const _Hashtable_ebo_helper& __eboh)$/;"	function	line:1134	struct:_Hashtable_ebo_helper	access:public	signature:(const _Hashtable_ebo_helper& __eboh)	returns:const _Tp 
_S_get	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _S_get(_Hashtable_ebo_helper& __eboh)$/;"	function	line:1138	struct:_Hashtable_ebo_helper	access:public	signature:(_Hashtable_ebo_helper& __eboh)	returns:_Tp 
_M_tp	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Tp _M_tp;$/;"	member	line:1142	struct:_Hashtable_ebo_helper	access:private
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash>     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false> $/;"	struct	line:1185	inherits:_Hashtable_ebo_helper<0,_ExtractKey>,_Hashtable_ebo_helper<1,_Hash>
__ebo_extract_key	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;$/;"	member	line:1190	struct:_Hash_code_base	typeref:class:__ebo_extract_key	access:private
__ebo_hash	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_hash = _Hashtable_ebo_helper<1, _Hash>;$/;"	member	line:1191	struct:_Hash_code_base	typeref:class:__ebo_hash	access:private
__hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef void* 					__hash_code; $/;"	typedef	line:1194	struct:_Hash_code_base	access:protected
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Hash_node<_Value, false>			__node_type; $/;"	typedef	line:1195	struct:_Hash_code_base	access:protected
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base() = default;$/;"	prototype	line:1199	struct:_Hash_code_base	access:protected	signature:()
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base(const _ExtractKey& __ex, const _H1&, const _H2&,$/;"	function	line:1201	struct:_Hash_code_base	access:protected	signature:(const _ExtractKey& __ex, const _H1&, const _H2&, const _Hash& __h)
_M_hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_hash_code(const _Key& __key) const$/;"	function	line:1206	struct:_Hash_code_base	access:protected	signature:(const _Key& __key) const	returns:__hash_code 
_M_bucket_index	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_bucket_index(const _Key& __k, __hash_code, std::size_t __n) const$/;"	function	line:1210	struct:_Hash_code_base	access:protected	signature:(const _Key& __k, __hash_code, std::size_t __n) const	returns:std :: size_t 
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>(),$/;"	function	line:1215	struct:_Hash_code_base	access:protected	signature:(declval<const _Hash&>(	returns:noexcept 
_M_store_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_store_code(__node_type*, __hash_code) const$/;"	function	line:1220	struct:_Hash_code_base	access:protected	signature:(__node_type*, __hash_code) const	returns:void 
_M_copy_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_copy_code(__node_type*, const __node_type*) const$/;"	function	line:1224	struct:_Hash_code_base	access:protected	signature:(__node_type*, const __node_type*) const	returns:void 
_M_swap	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_swap(_Hash_code_base& __x)$/;"	function	line:1228	struct:_Hash_code_base	access:protected	signature:(_Hash_code_base& __x)	returns:void 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }$/;"	function	line:1235	struct:_Hash_code_base	access:protected	signature:() const	returns:const _ExtractKey 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() { return __ebo_extract_key::_S_get(*this); }$/;"	function	line:1238	struct:_Hash_code_base	access:protected	signature:()	returns:_ExtractKey 
_M_ranged_hash	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_ranged_hash() const { return __ebo_hash::_S_cget(*this); }$/;"	function	line:1241	struct:_Hash_code_base	access:protected	signature:() const	returns:const _Hash 
_M_ranged_hash	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_ranged_hash() { return __ebo_hash::_S_get(*this); }$/;"	function	line:1244	struct:_Hash_code_base	access:protected	signature:()	returns:_Hash 
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2>     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, $/;"	struct	line:1262	inherits:_Hashtable_ebo_helper<0,_ExtractKey>,_Hashtable_ebo_helper<1,_H1>,_Hashtable_ebo_helper<2,_H2>
__ebo_extract_key	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;$/;"	member	line:1269	struct:_Hash_code_base	typeref:class:__ebo_extract_key	access:private
__ebo_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;$/;"	member	line:1270	struct:_Hash_code_base	typeref:class:__ebo_h1	access:private
__ebo_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;$/;"	member	line:1271	struct:_Hash_code_base	typeref:class:__ebo_h2	access:private
hasher	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _H1 					hasher; $/;"	typedef	line:1278	struct:_Hash_code_base	access:public
hash_function	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      hash_function() const$/;"	function	line:1281	struct:_Hash_code_base	access:public	signature:() const	returns:hasher 
__hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::size_t 				__hash_code; $/;"	typedef	line:1285	struct:_Hash_code_base	access:protected
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Hash_node<_Value, false>			__node_type; $/;"	typedef	line:1286	struct:_Hash_code_base	access:protected
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base() = default;$/;"	prototype	line:1290	struct:_Hash_code_base	access:protected	signature:()
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base(const _ExtractKey& __ex,$/;"	function	line:1292	struct:_Hash_code_base	access:protected	signature:(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Default_ranged_hash&)
_M_hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_hash_code(const _Key& __k) const$/;"	function	line:1298	struct:_Hash_code_base	access:protected	signature:(const _Key& __k) const	returns:__hash_code 
_M_bucket_index	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_bucket_index(const _Key&, __hash_code __c, std::size_t __n) const$/;"	function	line:1302	struct:_Hash_code_base	access:protected	signature:(const _Key&, __hash_code __c, std::size_t __n) const	returns:std :: size_t 
declval	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^		  && noexcept(declval<const _H2&>()((__hash_code)0,$/;"	function	line:1308	struct:_Hash_code_base	access:protected	signature:()	returns:noexcept 
_M_store_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_store_code(__node_type*, __hash_code) const$/;"	function	line:1313	struct:_Hash_code_base	access:protected	signature:(__node_type*, __hash_code) const	returns:void 
_M_copy_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_copy_code(__node_type*, const __node_type*) const$/;"	function	line:1317	struct:_Hash_code_base	access:protected	signature:(__node_type*, const __node_type*) const	returns:void 
_M_swap	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_swap(_Hash_code_base& __x)$/;"	function	line:1321	struct:_Hash_code_base	access:protected	signature:(_Hash_code_base& __x)	returns:void 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }$/;"	function	line:1329	struct:_Hash_code_base	access:protected	signature:() const	returns:const _ExtractKey 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() { return __ebo_extract_key::_S_get(*this); }$/;"	function	line:1332	struct:_Hash_code_base	access:protected	signature:()	returns:_ExtractKey 
_M_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h1() const { return __ebo_h1::_S_cget(*this); }$/;"	function	line:1335	struct:_Hash_code_base	access:protected	signature:() const	returns:const _H1 
_M_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h1() { return __ebo_h1::_S_get(*this); }$/;"	function	line:1338	struct:_Hash_code_base	access:protected	signature:()	returns:_H1 
_M_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h2() const { return __ebo_h2::_S_cget(*this); }$/;"	function	line:1341	struct:_Hash_code_base	access:protected	signature:() const	returns:const _H2 
_M_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h2() { return __ebo_h2::_S_get(*this); }$/;"	function	line:1344	struct:_Hash_code_base	access:protected	signature:()	returns:_H2 
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2>     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, $/;"	struct	line:1352	inherits:_Hashtable_ebo_helper<0,_ExtractKey>,_Hashtable_ebo_helper<1,_H1>,_Hashtable_ebo_helper<2,_H2>
__ebo_extract_key	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;$/;"	member	line:1363	struct:_Hash_code_base	typeref:class:__ebo_extract_key	access:private
__ebo_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;$/;"	member	line:1364	struct:_Hash_code_base	typeref:class:__ebo_h1	access:private
__ebo_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;$/;"	member	line:1365	struct:_Hash_code_base	typeref:class:__ebo_h2	access:private
hasher	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _H1 					hasher; $/;"	typedef	line:1368	struct:_Hash_code_base	access:public
hash_function	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      hash_function() const$/;"	function	line:1371	struct:_Hash_code_base	access:public	signature:() const	returns:hasher 
__hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::size_t 				__hash_code; $/;"	typedef	line:1375	struct:_Hash_code_base	access:protected
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Hash_node<_Value, true>			__node_type; $/;"	typedef	line:1376	struct:_Hash_code_base	access:protected
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base() = default;$/;"	prototype	line:1379	struct:_Hash_code_base	access:protected	signature:()
_Hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_code_base(const _ExtractKey& __ex,$/;"	function	line:1380	struct:_Hash_code_base	access:protected	signature:(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Default_ranged_hash&)
_M_hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_hash_code(const _Key& __k) const$/;"	function	line:1386	struct:_Hash_code_base	access:protected	signature:(const _Key& __k) const	returns:__hash_code 
_M_bucket_index	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_bucket_index(const _Key&, __hash_code __c,$/;"	function	line:1390	struct:_Hash_code_base	access:protected	signature:(const _Key&, __hash_code __c, std::size_t __n) const	returns:std :: size_t 
noexcept	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^	noexcept( noexcept(declval<const _H2&>()((__hash_code)0,$/;"	function	line:1396	struct:_Hash_code_base	access:protected	signature:(declval<const _H2&>(	returns:noexcept 
_M_store_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_store_code(__node_type* __n, __hash_code __c) const$/;"	function	line:1401	struct:_Hash_code_base	access:protected	signature:(__node_type* __n, __hash_code __c) const	returns:void 
_M_copy_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_copy_code(__node_type* __to, const __node_type* __from) const$/;"	function	line:1405	struct:_Hash_code_base	access:protected	signature:(__node_type* __to, const __node_type* __from) const	returns:void 
_M_swap	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_swap(_Hash_code_base& __x)$/;"	function	line:1409	struct:_Hash_code_base	access:protected	signature:(_Hash_code_base& __x)	returns:void 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }$/;"	function	line:1417	struct:_Hash_code_base	access:protected	signature:() const	returns:const _ExtractKey 
_M_extract	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_extract() { return __ebo_extract_key::_S_get(*this); }$/;"	function	line:1420	struct:_Hash_code_base	access:protected	signature:()	returns:_ExtractKey 
_M_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h1() const { return __ebo_h1::_S_cget(*this); }$/;"	function	line:1423	struct:_Hash_code_base	access:protected	signature:() const	returns:const _H1 
_M_h1	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h1() { return __ebo_h1::_S_get(*this); }$/;"	function	line:1426	struct:_Hash_code_base	access:protected	signature:()	returns:_H1 
_M_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h2() const { return __ebo_h2::_S_cget(*this); }$/;"	function	line:1429	struct:_Hash_code_base	access:protected	signature:() const	returns:const _H2 
_M_h2	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h2() { return __ebo_h2::_S_get(*this); }$/;"	function	line:1432	struct:_Hash_code_base	access:protected	signature:()	returns:_H2 
_Equal_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _Equal, typename _HashCodeType>   struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true> $/;"	struct	line:1447
_S_equals	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,$/;"	function	line:1450	struct:_Equal_helper	access:public	signature:(const _Equal& __eq, const _ExtractKey& __extract, const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)	returns:bool 
_Equal_helper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _Equal, typename _HashCodeType>   struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false> $/;"	struct	line:1458
_S_equals	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,$/;"	function	line:1461	struct:_Equal_helper	access:public	signature:(const _Equal& __eq, const _ExtractKey& __extract, const _Key& __k, _HashCodeType, _Hash_node<_Value, false>* __n)	returns:bool 
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash>     struct _Local_iterator_base<_Key, _Value, _ExtractKey, $/;"	struct	line:1470	inherits:_Hashtable_ebo_helper<0,_H2>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Hashtable_ebo_helper<0, _H2>;$/;"	member	line:1475	struct:_Local_iterator_base	typeref:class:__base_type	access:protected
__hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,$/;"	member	line:1476	struct:_Local_iterator_base	typeref:class:__hash_code_base	access:protected
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator_base() = default;$/;"	prototype	line:1479	struct:_Local_iterator_base	access:protected	signature:()
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator_base(const __hash_code_base& __base,$/;"	function	line:1480	struct:_Local_iterator_base	access:protected	signature:(const __hash_code_base& __base, _Hash_node<_Value, true>* __p, std::size_t __bkt, std::size_t __bkt_count)
_M_incr	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_incr()$/;"	function	line:1487	struct:_Local_iterator_base	access:protected	signature:()	returns:void 
_M_cur	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_node<_Value, true>*  _M_cur;$/;"	member	line:1500	struct:_Local_iterator_base	access:protected
_M_bucket	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      std::size_t _M_bucket;$/;"	member	line:1501	struct:_Local_iterator_base	access:protected
_M_bucket_count	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      std::size_t _M_bucket_count;$/;"	member	line:1502	struct:_Local_iterator_base	access:protected
_M_curr	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_curr() const { return _M_cur; }  \/\/ for equality ops$/;"	function	line:1506	struct:_Local_iterator_base	access:public	signature:() const	returns:const void 
_M_get_bucket	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_get_bucket() const { return _M_bucket; }  \/\/ for debug mode$/;"	function	line:1509	struct:_Local_iterator_base	access:public	signature:() const	returns:std :: size_t 
_Hash_code_storage	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>     struct _Hash_code_storage $/;"	struct	line:1517
_M_storage	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;$/;"	member	line:1519	struct:_Hash_code_storage	access:public
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h() { return _M_storage._M_ptr(); }$/;"	function	line:1522	struct:_Hash_code_storage	access:public	signature:()	returns:_Tp 
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h() const { return _M_storage._M_ptr(); }$/;"	function	line:1525	struct:_Hash_code_storage	access:public	signature:() const	returns:const _Tp 
_Hash_code_storage	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Tp>     struct _Hash_code_storage<_Tp, true> $/;"	struct	line:1530
static_assert	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      static_assert( std::is_empty<_Tp>::value, "Type must be empty" );$/;"	prototype	line:1532	struct:_Hash_code_storage	access:public	signature:( std::is_empty<_Tp>::value, "Type must be empty" )
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h() { return reinterpret_cast<_Tp*>(this); }$/;"	function	line:1537	struct:_Hash_code_storage	access:public	signature:()	returns:_Tp 
_M_h	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_h() const { return reinterpret_cast<const _Tp*>(this); }$/;"	function	line:1540	struct:_Hash_code_storage	access:public	signature:() const	returns:const _Tp 
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash>     struct _Local_iterator_base<_Key, _Value, _ExtractKey, $/;"	struct	line:1552	inherits:__hash_code_for_local_iter<_Key,_Value,_ExtractKey,_H1,_H2,_Hash>
__hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,$/;"	member	line:1557	struct:_Local_iterator_base	typeref:class:__hash_code_base	access:protected
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator_base() : _M_bucket_count(-1) { }$/;"	function	line:1560	struct:_Local_iterator_base	access:protected	signature:()
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator_base(const __hash_code_base& __base,$/;"	function	line:1562	struct:_Local_iterator_base	access:protected	signature:(const __hash_code_base& __base, _Hash_node<_Value, false>* __p, std::size_t __bkt, std::size_t __bkt_count)
~_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      ~_Local_iterator_base()$/;"	function	line:1568	struct:_Local_iterator_base	access:protected	signature:()
_Local_iterator_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator_base(const _Local_iterator_base& __iter)$/;"	function	line:1574	struct:_Local_iterator_base	access:protected	signature:(const _Local_iterator_base& __iter)
operator =	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator=(const _Local_iterator_base& __iter)$/;"	function	line:1583	struct:_Local_iterator_base	access:protected	signature:(const _Local_iterator_base& __iter)	returns:_Local_iterator_base 
_M_incr	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_incr()$/;"	function	line:1596	struct:_Local_iterator_base	access:protected	signature:()	returns:void 
_M_cur	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hash_node<_Value, false>*  _M_cur;$/;"	member	line:1608	struct:_Local_iterator_base	access:protected
_M_bucket	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      std::size_t _M_bucket;$/;"	member	line:1609	struct:_Local_iterator_base	access:protected
_M_bucket_count	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      std::size_t _M_bucket_count;$/;"	member	line:1610	struct:_Local_iterator_base	access:protected
_M_init	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_init(const __hash_code_base& __base)$/;"	function	line:1613	struct:_Local_iterator_base	access:protected	signature:(const __hash_code_base& __base)	returns:void 
_M_destroy	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_destroy() { this->_M_h()->~__hash_code_base(); }$/;"	function	line:1617	struct:_Local_iterator_base	access:protected	signature:()	returns:void 
_M_curr	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_curr() const { return _M_cur; }  \/\/ for equality ops and debug mode$/;"	function	line:1621	struct:_Local_iterator_base	access:public	signature:() const	returns:const void 
_M_get_bucket	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_get_bucket() const { return _M_bucket; }  \/\/ for debug mode$/;"	function	line:1624	struct:_Local_iterator_base	access:public	signature:() const	returns:std :: size_t 
operator ==	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash, bool __cache>     inline bool     operator==(const _Local_iterator_base<_Key, _Value, _ExtractKey, $/;"	function	line:1630	signature:(const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __x, const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __y)	returns:template inline bool 
operator !=	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash, bool __cache>     inline bool     operator!=(const _Local_iterator_base<_Key, _Value, _ExtractKey, $/;"	function	line:1639	signature:(const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __x, const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __y)	returns:template inline bool 
_Local_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash, 	   bool __constant_iterators, bool __cache>     struct _Local_iterator $/;"	struct	line:1649	inherits:_Local_iterator_base<_Key,_Value,_ExtractKey,_H1,_H2,_Hash,__cache>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,$/;"	member	line:1654	struct:_Local_iterator	typeref:class:__base_type	access:private
__hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_code_base = typename __base_type::__hash_code_base;$/;"	member	line:1656	struct:_Local_iterator	typeref:class:__hash_code_base	access:private
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Value					value_type; $/;"	typedef	line:1658	struct:_Local_iterator	access:public
pointer	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef typename std::conditional<__constant_iterators, 					const _Value*, _Value*>::type 						       pointer; $/;"	typedef	line:1661	struct:_Local_iterator	access:public
reference	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef typename std::conditional<__constant_iterators, 					const _Value&, _Value&>::type 						       reference; $/;"	typedef	line:1664	struct:_Local_iterator	access:public
difference_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::ptrdiff_t				difference_type; $/;"	typedef	line:1665	struct:_Local_iterator	access:public
iterator_category	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::forward_iterator_tag			iterator_category; $/;"	typedef	line:1666	struct:_Local_iterator	access:public
_Local_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator() = default;$/;"	prototype	line:1668	struct:_Local_iterator	access:public	signature:()
_Local_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_iterator(const __hash_code_base& __base,$/;"	function	line:1670	struct:_Local_iterator	access:public	signature:(const __hash_code_base& __base, _Hash_node<_Value, __cache>* __p, std::size_t __bkt, std::size_t __bkt_count)
operator *	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator*() const$/;"	function	line:1677	struct:_Local_iterator	access:public	signature:() const	returns:reference 
operator ->	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator->() const$/;"	function	line:1681	struct:_Local_iterator	access:public	signature:() const	returns:pointer 
operator ++	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator++()$/;"	function	line:1685	struct:_Local_iterator	access:public	signature:()	returns:_Local_iterator 
operator ++	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator++(int)$/;"	function	line:1692	struct:_Local_iterator	access:public	signature:(int)	returns:_Local_iterator 
_Local_const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _ExtractKey, 	   typename _H1, typename _H2, typename _Hash, 	   bool __constant_iterators, bool __cache>     struct _Local_const_iterator $/;"	struct	line:1704	inherits:_Local_iterator_base<_Key,_Value,_ExtractKey,_H1,_H2,_Hash,__cache>
__base_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,$/;"	member	line:1709	struct:_Local_const_iterator	typeref:class:__base_type	access:private
__hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hash_code_base = typename __base_type::__hash_code_base;$/;"	member	line:1711	struct:_Local_const_iterator	typeref:class:__hash_code_base	access:private
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef _Value					value_type; $/;"	typedef	line:1714	struct:_Local_const_iterator	access:public
pointer	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef const _Value*				pointer; $/;"	typedef	line:1715	struct:_Local_const_iterator	access:public
reference	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef const _Value&				reference; $/;"	typedef	line:1716	struct:_Local_const_iterator	access:public
difference_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::ptrdiff_t				difference_type; $/;"	typedef	line:1717	struct:_Local_const_iterator	access:public
iterator_category	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      typedef std::forward_iterator_tag			iterator_category; $/;"	typedef	line:1718	struct:_Local_const_iterator	access:public
_Local_const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_const_iterator() = default;$/;"	prototype	line:1720	struct:_Local_const_iterator	access:public	signature:()
_Local_const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_const_iterator(const __hash_code_base& __base,$/;"	function	line:1722	struct:_Local_const_iterator	access:public	signature:(const __hash_code_base& __base, _Hash_node<_Value, __cache>* __p, std::size_t __bkt, std::size_t __bkt_count)
_Local_const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Local_const_iterator(const _Local_iterator<_Key, _Value, _ExtractKey,$/;"	function	line:1728	struct:_Local_const_iterator	access:public	signature:(const _Local_iterator<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __constant_iterators, __cache>& __x)
operator *	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator*() const$/;"	function	line:1736	struct:_Local_const_iterator	access:public	signature:() const	returns:reference 
operator ->	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator->() const$/;"	function	line:1740	struct:_Local_const_iterator	access:public	signature:() const	returns:pointer 
operator ++	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator++()$/;"	function	line:1744	struct:_Local_const_iterator	access:public	signature:()	returns:_Local_const_iterator 
operator ++	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      operator++(int)$/;"	function	line:1751	struct:_Local_const_iterator	access:public	signature:(int)	returns:_Local_const_iterator 
_Hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, typename _Traits>   struct _Hashtable_base $/;"	struct	line:1772	inherits:_Hash_code_base<_Key,_Value,_ExtractKey,_H1,_H2,_Hash,_Traits::__hash_cached::value>,_Hashtable_ebo_helper<0,_Equal>
key_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef _Key					key_type; $/;"	typedef	line:1778	struct:_Hashtable_base	access:public
value_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef _Value					value_type; $/;"	typedef	line:1779	struct:_Hashtable_base	access:public
key_equal	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef _Equal					key_equal; $/;"	typedef	line:1780	struct:_Hashtable_base	access:public
size_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::size_t					size_type; $/;"	typedef	line:1781	struct:_Hashtable_base	access:public
difference_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    typedef std::ptrdiff_t				difference_type; $/;"	typedef	line:1782	struct:_Hashtable_base	access:public
__traits_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __traits_type = _Traits;$/;"	member	line:1784	struct:_Hashtable_base	typeref:class:__traits_type	access:public
__hash_cached	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __hash_cached = typename __traits_type::__hash_cached;$/;"	member	line:1785	struct:_Hashtable_base	typeref:class:__hash_cached	access:public
__constant_iterators	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __constant_iterators = typename __traits_type::__constant_iterators;$/;"	member	line:1786	struct:_Hashtable_base	typeref:class:__constant_iterators	access:public
__unique_keys	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __unique_keys = typename __traits_type::__unique_keys;$/;"	member	line:1787	struct:_Hashtable_base	typeref:class:__unique_keys	access:public
__hash_code_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,$/;"	member	line:1789	struct:_Hashtable_base	typeref:class:__hash_code_base	access:public
__hash_code	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __hash_code = typename __hash_code_base::__hash_code;$/;"	member	line:1793	struct:_Hashtable_base	typeref:class:__hash_code	access:public
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __node_type = typename __hash_code_base::__node_type;$/;"	member	line:1794	struct:_Hashtable_base	typeref:class:__node_type	access:public
iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using iterator = __detail::_Node_iterator<value_type,$/;"	member	line:1796	struct:_Hashtable_base	typeref:class:iterator	access:public
const_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using const_iterator = __detail::_Node_const_iterator<value_type,$/;"	member	line:1800	struct:_Hashtable_base	typeref:class:const_iterator	access:public
local_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using local_iterator = __detail::_Local_iterator<key_type, value_type,$/;"	member	line:1804	struct:_Hashtable_base	typeref:class:local_iterator	access:public
const_local_iterator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using const_local_iterator = __detail::_Local_const_iterator<key_type,$/;"	member	line:1809	struct:_Hashtable_base	typeref:class:const_local_iterator	access:public
__ireturn_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using __ireturn_type = typename std::conditional<__unique_keys::value,$/;"	member	line:1815	struct:_Hashtable_base	typeref:class:__ireturn_type	access:public
_EqualEBO	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;$/;"	member	line:1819	struct:_Hashtable_base	typeref:class:_EqualEBO	access:private
_EqualHelper	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    using _EqualHelper =  _Equal_helper<_Key, _Value, _ExtractKey, _Equal,$/;"	member	line:1820	struct:_Hashtable_base	typeref:class:_EqualHelper	access:private
_Hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Hashtable_base() = default;$/;"	prototype	line:1824	struct:_Hashtable_base	access:protected	signature:()
_Hashtable_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2,$/;"	function	line:1825	struct:_Hashtable_base	access:protected	signature:(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Hash& __hash, const _Equal& __eq)
_M_equals	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const$/;"	function	line:1831	struct:_Hashtable_base	access:protected	signature:(const _Key& __k, __hash_code __c, __node_type* __n) const	returns:bool 
_M_swap	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_swap(_Hashtable_base& __x)$/;"	function	line:1838	struct:_Hashtable_base	access:protected	signature:(_Hashtable_base& __x)	returns:void 
_M_eq	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_eq() const { return _EqualEBO::_S_cget(*this); }$/;"	function	line:1845	struct:_Hashtable_base	access:protected	signature:() const	returns:const _Equal 
_M_eq	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^    _M_eq() { return _EqualEBO::_S_get(*this); }$/;"	function	line:1848	struct:_Hashtable_base	access:protected	signature:()	returns:_Equal 
_Equality_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  struct _Equality_base$/;"	struct	line:1856
_S_is_permutation	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _S_is_permutation(_Uiterator, _Uiterator, _Uiterator);$/;"	prototype	line:1861	struct:_Equality_base	access:protected	signature:(_Uiterator, _Uiterator, _Uiterator)	returns:bool 
_S_is_permutation	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Uiterator>     bool     _Equality_base::     _S_is_permutation(_Uiterator __first1, _Uiterator __last1, $/;"	function	line:1868	class:_Equality_base	signature:(_Uiterator __first1, _Uiterator __last1, _Uiterator __first2)	returns:template bool _Equality_base :: 
_Equality	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, $/;"	struct	line:1930
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,$/;"	member	line:1933	struct:_Equality	typeref:class:__hashtable	access:public
_M_equal	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_equal(const __hashtable&) const;$/;"	prototype	line:1937	struct:_Equality	access:public	signature:(const __hashtable&) const	returns:bool 
_M_equal	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     bool     _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, 	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::     _M_equal(const __hashtable& __other) const $/;"	function	line:1947	class:_Equality	signature:(const __hashtable& __other) const	returns:template bool _Equality <_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true> :: 
_Equality	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, $/;"	struct	line:1968	inherits:_Equality_base
__hashtable	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,$/;"	member	line:1972	struct:_Equality	typeref:class:__hashtable	access:public
_M_equal	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_equal(const __hashtable&) const;$/;"	prototype	line:1976	struct:_Equality	access:public	signature:(const __hashtable&) const	returns:bool 
_M_equal	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _Key, typename _Value, typename _Alloc, 	   typename _ExtractKey, typename _Equal, 	   typename _H1, typename _H2, typename _Hash, 	   typename _RehashPolicy, typename _Traits>     bool     _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, 	      _H1, _H2, _Hash, _RehashPolicy, _Traits, false>::     _M_equal(const __hashtable& __other) const $/;"	function	line:1986	class:_Equality	signature:(const __hashtable& __other) const	returns:template bool _Equality <_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false> :: 
_Hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc> $/;"	struct	line:2016	inherits:_Hashtable_ebo_helper<0,_NodeAlloc>
__ebo_node_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;$/;"	member	line:2019	struct:_Hashtable_alloc	typeref:class:__ebo_node_alloc	access:private
__node_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_type = typename _NodeAlloc::value_type;$/;"	member	line:2021	struct:_Hashtable_alloc	typeref:class:__node_type	access:public
__node_alloc_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_alloc_type = _NodeAlloc;$/;"	member	line:2022	struct:_Hashtable_alloc	typeref:class:__node_alloc_type	access:public
__node_alloc_traits	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;$/;"	member	line:2024	struct:_Hashtable_alloc	typeref:class:__node_alloc_traits	access:public
__value_alloc_traits	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __value_alloc_traits = typename __node_alloc_traits::template$/;"	member	line:2026	struct:_Hashtable_alloc	typeref:class:__value_alloc_traits	access:public
__node_base	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __node_base = __detail::_Hash_node_base;$/;"	member	line:2029	struct:_Hashtable_alloc	typeref:class:__node_base	access:public
__bucket_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __bucket_type = __node_base*;      $/;"	member	line:2030	struct:_Hashtable_alloc	typeref:class:__bucket_type	access:public
__bucket_alloc_type	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __bucket_alloc_type =$/;"	member	line:2031	struct:_Hashtable_alloc	typeref:class:__bucket_alloc_type	access:public
__bucket_alloc_traits	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;$/;"	member	line:2033	struct:_Hashtable_alloc	typeref:class:__bucket_alloc_traits	access:public
_Hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hashtable_alloc() = default;$/;"	prototype	line:2035	struct:_Hashtable_alloc	access:public	signature:()
_Hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hashtable_alloc(const _Hashtable_alloc&) = default;$/;"	prototype	line:2036	struct:_Hashtable_alloc	access:public	signature:(const _Hashtable_alloc&)
_Hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _Hashtable_alloc(_Hashtable_alloc&&) = default;$/;"	prototype	line:2037	struct:_Hashtable_alloc	access:public	signature:(_Hashtable_alloc&&)
_Hashtable_alloc	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename _Alloc> 	_Hashtable_alloc(_Alloc&& __a) $/;"	function	line:2040	struct:_Hashtable_alloc	access:public	signature:(_Alloc&& __a)	returns:template 
_M_node_allocator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_node_allocator()$/;"	function	line:2045	struct:_Hashtable_alloc	access:public	signature:()	returns:__node_alloc_type 
_M_node_allocator	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_node_allocator() const$/;"	function	line:2049	struct:_Hashtable_alloc	access:public	signature:() const	returns:const __node_alloc_type 
_M_allocate_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      template<typename... _Args> 	__node_type* 	_M_allocate_node(_Args&&... __args); $/;"	prototype	line:2054	struct:_Hashtable_alloc	access:public	signature:(_Args&&.... __args)	returns:template __node_type 
_M_deallocate_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_deallocate_node(__node_type* __n);$/;"	prototype	line:2057	struct:_Hashtable_alloc	access:public	signature:(__node_type* __n)	returns:void 
_M_deallocate_nodes	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_deallocate_nodes(__node_type* __n);$/;"	prototype	line:2061	struct:_Hashtable_alloc	access:public	signature:(__node_type* __n)	returns:void 
_M_allocate_buckets	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_allocate_buckets(std::size_t __n);$/;"	prototype	line:2064	struct:_Hashtable_alloc	access:public	signature:(std::size_t __n)	returns:__bucket_type 
_M_deallocate_buckets	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^      _M_deallocate_buckets(__bucket_type*, std::size_t __n);$/;"	prototype	line:2067	struct:_Hashtable_alloc	access:public	signature:(__bucket_type*, std::size_t __n)	returns:void 
_M_allocate_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     template<typename... _Args>       typename _Hashtable_alloc<_NodeAlloc>::__node_type*       _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args) $/;"	function	line:2075	class:_Hashtable_alloc	signature:(_Args&&.... __args)	returns:template template typename _Hashtable_alloc <_NodeAlloc> :: __node_type _Hashtable_alloc <_NodeAlloc> :: 
_M_deallocate_node	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     void     _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n) $/;"	function	line:2096	class:_Hashtable_alloc	signature:(__node_type* __n)	returns:template void _Hashtable_alloc <_NodeAlloc> :: 
_M_deallocate_nodes	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     void     _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n) $/;"	function	line:2107	class:_Hashtable_alloc	signature:(__node_type* __n)	returns:template void _Hashtable_alloc <_NodeAlloc> :: 
_M_allocate_buckets	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*     _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n) $/;"	function	line:2119	class:_Hashtable_alloc	signature:(std::size_t __n)	returns:template typename _Hashtable_alloc <_NodeAlloc> :: __bucket_type _Hashtable_alloc <_NodeAlloc> :: 
_M_deallocate_buckets	C:\Program Files\mingw-w64\mingw64\lib\gcc\x86_64-w64-mingw32\8.1.0\include\c++\bits\hashtable_policy.h	/^  template<typename _NodeAlloc>     void     _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts, $/;"	function	line:2131	class:_Hashtable_alloc	signature:(__bucket_type* __bkts, std::size_t __n)	returns:template void _Hashtable_alloc <_NodeAlloc> :: 
